package fog.maps.api.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.task.AsyncTaskExecutor;

import java.util.concurrent.Callable;
import java.util.concurrent.Future;

/**
 * Created by nakulsharma on 30-11-2016.
 * Handles the exception generated by asynchronous task
 */
public class HandlingAsyncTaskExecutor implements AsyncTaskExecutor{

    private Logger LOG = LoggerFactory.getLogger(HandlingAsyncTaskExecutor.class);
    private AsyncTaskExecutor executor;

    public HandlingAsyncTaskExecutor(AsyncTaskExecutor executor) {
        this.executor = executor;
    }

    @Override
    public void execute(Runnable task, long startTimeout) {
        executor.execute(createWrappedRunnable(task), startTimeout);
    }

    @Override
    public Future<?> submit(Runnable task) {
        return executor.submit(createWrappedRunnable(task));
    }

    @Override
    public <T> Future<T> submit(Callable<T> callable) {
        return null;
    }

    @Override
    public void execute(Runnable task) {
        executor.execute(task);  // runnable task
    }

    private <T> Callable<T> createCallable(final Callable<T> callableTask) {
        return new Callable<T>() {
            @Override
            public T call() throws Exception {
                try {
                    return callableTask.call();
                } catch (Exception e) {
                    LOG.error("Exception occurred in asynchronous task. " + e.getMessage());
                    throw e;
                }
            }
        };
    }

    private Runnable createWrappedRunnable(final Runnable task) {
        return new Runnable() {
            @Override
            public void run() {
                try {
                    task.run();
                } catch (Exception e) {
                    LOG.error("Exception occurred in asynchronous task. " + e.getMessage());
                }
            }
        };
    }
}
